// mixins
// Mixin By @alfredochuc
// padding, background, radius, color
@mixin button($padding, $bg: #fff, $radius: 0px, $color: #000){
  display: block;
  transition: all 0.5s ease 0s;
  background: $bg;
  padding: $padding;
  text-align: center;
    -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  -o-border-radius: $radius;
  border-radius: $radius;
  color: $color;
  &:hover{
    background: #f1c101;
    color: #fff;
  }
}
@mixin button-icon($padding, $bg: #fff, $radius: 0px, $color: #000,$direction:'left',$icon:'\2605'){
    display: inline-block;
    white-space: nowrap;
    background-color: $bg;
    background-image: linear-gradient(top, #eee, $bg);
    filter: progid:DXImageTransform.Microsoft.gradient(startColorStr='#eeeeee', EndColorStr='#cccccc');
    border: none;
    // padding: 0 1.5em;
    padding: $padding;
    margin: 0.5em;
    font: bold 1em/2em Arial, Helvetica;
    text-decoration: none;
    transition: all 0.5s ease 0s;
    color: $color;
        -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  -o-border-radius: $radius;
  border-radius: $radius;
    // &:hover {
    //     background-color: #ddd;        
    //     background-image: linear-gradient(top, #fafafa, #ddd);
    //     filter: progid:DXImageTransform.Microsoft.gradient(startColorStr='#fafafa', EndColorStr='#dddddd');        
    // }

    // &:active {
    //     box-shadow: 0 0 4px 2px rgba(0,0,0,.3) inset;
    //     position: relative;
    //     top: 1px;
    // }

    // &:focus {
    //     outline: 0;
    //     background: #fafafa;
    // }  
    @if ($direction == 'left'){
      &:before {
        content: $icon;
        background: $yellow;
          // background: rgba(0,0,0,.1);
          // float: left;        
          position: absolute;
          top: 0;
          left: 0;
          // bottom: 0;
          height: 100%;
          width: 2em;
          text-align: center;
          font-size: 1.5em;
          margin: 0 1em 0 -1em;
          padding: 0 .2em;
          // box-shadow: 1px 0 0 rgba(0,0,0,.5), 2px 0 0 rgba(255,255,255,.5);
          // border-radius: .15em 0 0 .15em;
          pointer-events: none;        
      }
    }
    @else if ($direction == 'right'){
      &:after {
        content: $icon;
        background: $yellow;
        // background: rgba(0,0,0,.1);
        color: #000;
        // float: right;
        position: absolute;
        right: -10px;
        top: 0;
        bottom: 0;        
        width: 2em;
        text-align: center;
        font-size: 1.5em;
        margin: 0 -1em 0 -1em;
        padding: 0 .2em;
        // box-shadow: 1px 0 0 rgba(0,0,0,.5), 2px 0 0 rgba(255,255,255,.5);
        // border-radius: .15em 0 0 .15em;
        pointer-events: none;        
      }
    }
}

// Image overlay Background
@mixin overlay($url, $height: 'auto', $over: false ,$alpha: .70){
  background: url($url);
  height: $height;
  background-position: center center;
  background-size: cover;
  position: relative;
  width: 100%;
  
  @if $over { 
    // border: 1px solid;  
    &:after{
      content: "";
      background: rgba($over, $alpha);
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
    }
  }
}

//Triangle
/// @include triangle within a pseudo element and add positioning properties (ie. top, left)
//$direction: up, down, left, right

@mixin triangle($direction, $size: 8px, $color: #222){
  content: '';
  display: block;
  position: absolute;
  height: 0; width: 0;
  @if ($direction == 'up'){
    border-bottom: $size solid $color;
    border-left: $size solid transparent;
    border-right: $size solid transparent;
  }
  @else if ($direction == 'down'){
    border-top: $size solid $color;
    border-left: $size solid transparent;
    border-right: $size solid transparent;
  }
  @else if ($direction == 'left'){
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-right: $size solid $color;
  }
  @else if ($direction == 'right'){
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
  }
}

// Currency
%currency {
  position: relative;
  &:before {
    content: '$';
    position: relative;
    left: 0;
  }
}
.USD %currency:before { content: '$'; }
.EUR %currency:before { content: '\20AC'; } // must escape the html entities for each currency symbol
.ILS %currency:before { content: '\20AA'; }
.GBP %currency:before { content: '\00A3'; }

//Clearfix
%clearfix {
  *zoom: 1;
  &:after {
    content: '';
    display: table;
    line-height: 0;
    clear: both;
  }
}

// Respond To
// Breakpoints for each query
$smartphone: 480px;
$tabletPortrait: 767px;
$tabletLandscape: 1024px;
$desktop: 1174px;
$largeScreen: 1400px;

@mixin respondTo($media) {
  @if $media == smartphone {
    @media (max-width: $smartphone) { @content; }
  }
  @else if $media == tablet {
    @media (min-width: $tabletPortrait) and (max-width: $tabletLandscape) { @content; }
  }
  @else if $media == smallScreen {
    @media (max-width: $desktop) { @content; }
  }
  @else if $media == desktop {
    @media (min-width: $desktop) { @content; }
  }
}

// Ghost Vertical Align
@mixin ghostVerticalAlign($pseudoEl: before){
  &:#{$pseudoEl} {
    content: '';
    display: inline-block;
    vertical-align: middle;
    height: 100%; width: .1px;
  }
}
%vertical-align {
  @include ghostVerticalAlign();
}

// Truncate Text
@mixin truncateText($overflow: ellipsis){
  overflow: hidden;
  white-space: nowrap;
  text-overflow: $overflow; // values are: clip, ellipsis, or a string
}

// Animation
@mixin animation($name, $duration: 1000ms, $iterations: infinite, $timing-function: ease, $delay: 0ms) {
  // There is a FF bug that requires all time values to have units, even 0 !!!!!!
  -webkit-animation: $name $duration $iterations $timing-function $delay;
  -moz-animation: $name $duration $iterations $timing-function $delay;
  -o-animation: $name $duration $iterations $timing-function $delay;
  animation: $name $duration $iterations $timing-function $delay;
}

//Alerted
@-webkit-keyframes alertMe {
  from {
    border-width: 3px;
    border-color: gold;
  }
  to {
    border-width: 0;
    border-color: rgba(gold, .1);
  }
}
@-moz-keyframes alertMe {
  from {
    border-width: 3px;
    border-color: gold;
  }
  to {
    border-width: 0;
    border-color: rgba(gold, .1);
  }
}
@keyframes alertMe {
  from {
    border-width: 3px;
    border-color: gold;
  }
  to {
    border-width: 0;
    border-color: rgba(gold, .1);
  }
}
@mixin alerted() {
  &:before {
    content: '';
    position: absolute;
    top: 6px; right: 6px;
    height: 8px; width: 8px;
    border-radius: 10px;
    background-color: gold;
  }
  &:after {
    content: '';
    position: absolute;
    top: 0; right: 0;
    height: 20px; width: 20px;
    border-radius: 20px;
    background-color: transparent;
    border: solid gold;
    border-width: 2px; // animates
    box-sizing: border-box;
    @include animation($name: alertMe);
  }
}


// Resize Sprite - for resizing only a single image from a sprite
// params: $map = $<name>-sprites (ex. $icon-sprites)
//$sprite = file name w/o file type ending (ex. globe)
//$percent = number (ex. 50)
//(if compass CSS3 mixins not included, uncomment the background-size row and comment the @include version)
//
@mixin resize-sprite($map, $sprite, $percent) {
  $spritePath:    sprite-path($map);
  $spriteWidth:   image-width($spritePath);
  $spriteHeight:  image-height($spritePath);
  $width: image-width(sprite-file($map, $sprite));
  $height: image-height(sprite-file($map, $sprite));
  @include background-size(ceil($spriteWidth * ($percent/100)) ceil($spriteHeight * ($percent/100)));
  //  background-size: $spriteWidth * ($percent/100)) $spriteHeight * ($percent/100);
  width: ceil($width*($percent/100));
  height: ceil($height*($percent/100));
  background-position: 0 floor(nth(sprite-position($map, $sprite), 2)  * ($percent/100) );
}

 //Resizes all images in a given sprite
 //params: $only = if you want to list specific files instead of regenerating every image (ex. globe, checkmark)
@mixin resize-sprite-set($map, $percent, $only...) {
  $name: sprite_map_name($map);

  @each $sprite in sprite_names($map) {
    @if length($only) == 0 or index($only, $sprite) != false {
      .#{$name}-#{$sprite} {
        @include resize-sprite($map, $sprite, $percent);
      }
    }
  }
}

//HUI Tooltips

@mixin hui_tooltip($content: attr(data-tooltip), $direction: top) {
  position: relative;
  &:before, &:after {
    display: none;
    z-index: 98;
  }
  &:hover {
    &:after { // for text bubble
      content: $content;
      display: block;
      position: absolute;
      padding: 3px 6px;
      font-size: 12px;
      white-space: nowrap;
      color: #fff;
      text-shadow: 1px 1px #000;
      background-color: #222;
    }
    @if ($direction == 'top'){
      &:before {
        @include triangle(down, 6px, #222);
        top: -2px; margin-top: 0;
        left: 47%;
      }
      &:after {
        top: -28px;
        left: 47%; margin-left: -20px;
      }
    }
    @else if ($direction == 'bottom'){
      &:before {
        @include triangle(up, 6px, #222);
        top: auto; margin-top: 0;
        bottom: -2px;
        left: 47%;
      }
      &:after {
        bottom: -28px;
        left: 47%; margin-left: -20px;
      }
    }
  }
}


// Text-align justify
//For perfectly aligned grids that don't rely on floating elements and difficult calculations

%justify {
  text-align: justify;
  &:after { // adds a false last line to the content so justify is applied
    content: '';
    display: inline-block;
    width: 100%;
  }
}

// other mixin

// Sass Toolbox
 //A useful collection of Sass functions and mixins

// rem font-size with pixel fallback
@function calculateRem($size) {
  $remSize: $size / 16px;
  @return $remSize * 1rem;
}

@mixin font-size($size) {
  font-size: $size;
  font-size: calculateRem($size);
}

// breakpoints
@mixin bp-large {
  @media only screen and (max-width: 60em) {
    @content;
  }
}

@mixin bp-medium {
  @media only screen and (max-width: 40em) {
    @content;
  }
}

@mixin bp-small {
  @media only screen and (max-width: 30em) {
    @content;
  }
}

// svg with png and retina fallback
$image-path: '../img' !default;
$fallback-extension: 'png' !default;
$retina-suffix: '@2x';
@mixin background-image($name, $size:false){
    background-image: url(#{$image-path}/#{$name}.svg);
    @if($size){
        background-size: $size;
    }
    .no-svg &{
        background-image: url(#{$image-path}/#{$name}.#{$fallback-extension});

        @media only screen and (-moz-min-device-pixel-ratio: 1.5), only screen and (-o-min-device-pixel-ratio: 3/2), only screen and (-webkit-min-device-pixel-ratio: 1.5), only screen and (min-device-pixel-ratio: 1.5) {
          background-image: url(#{$image-path}/#{$name}#{$retina-suffix}.#{$fallback-extension});
        }
    }
}

// animations and keyframes
/*@mixin keyframes($animation-name) {
  @-webkit-keyframes $animation-name {
    @content;
  }
  @-moz-keyframes $animation-name {
    @content;
  }  
  @-ms-keyframes $animation-name {
    @content;
  }
  @-o-keyframes $animation-name {
    @content;
  }  
  @keyframes $animation-name {
    @content;
  }
}*/

@mixin animation($str) {
  -webkit-animation: #{$str};
  -moz-animation: #{$str};
  -ms-animation: #{$str};
  -o-animation: #{$str};
  animation: #{$str};      
}

// transitions
@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}

// opacity
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

// clearfix
%clearfix {
  *zoom: 1;
  &:before, &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

// visually hide an element
%visuallyhidden {
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip: rect(0, 0, 0, 0);
  position: absolute;
}

//========= box-shadow mixin ===========
@mixin box-shadow($shadow...) {
  -webkit-box-shadow: $shadow; // iOS <4.3 & Android <4.1
  box-shadow: $shadow;
}

//========= opacity mixin ===========
@mixin opacity($opacity) {
  // IE8 filter
  $opacity-ie: ($opacity * 100);
  filter: #{alpha(opacity=$opacity-ie)};
  opacity: $opacity;
}

//========= clear margin & padding ===========
@mixin clear-margin {
  margin: 0;
  padding: 0;
}

//========= border-radius ===========

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  -o-border-radius: $radius;
  border-radius: $radius;
}

//========= fontawesome icon ===========

@mixin icon {
  display: inline-block;
  font-family: $font-icons;
  font-style: normal;
  font-weight: normal;
  line-height: 1;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

@mixin size($width, $height) {
  width: $width+px;
  height: $height+px;
}

@mixin square($size) {
  @include size($size, $size);
}